// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // For Vercel deployment
}

// AUTH MODELS (for NextAuth.js)
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  programs      Program[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// APP MODELS
model Program {
  id        String             @id @default(cuid())
  title     String
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises ProgramExercise[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ProgramExercise {
  id          String  @id @default(cuid())
  programId   String
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  exerciseId  String // ID from ExerciseDB
  name        String
  sets        Int
  reps        String // e.g., "8-12"
  rest        Int    // in seconds
  gifUrl      String?
  target      String?
  equipment   String?
}